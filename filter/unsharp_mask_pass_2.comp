#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0       ) uniform           sampler2D input_image;
layout (binding = 1, rgba8) uniform writeonly image2D output_image;
layout (binding = 2, rgba8) uniform readonly  image2D source_image;

layout (binding=3) uniform data {
    float offsets[256];
    float weights[256];
    uint radius;
    float intensity;
};

vec4 gaussian_vertical(vec2 image_dim) {
    vec2 uv = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec2 offset_uv = uv;

    vec4 res = texture(input_image, uv/image_dim);

    if(radius == 0) {
        return res;
    }

    vec4 blur = weights[0] * res;

    for(uint i = 1; i < radius; i++) {
        float offset = offsets[i];
        float weight = weights[i];

		offset_uv = (uv + vec2(0.0, offset))/image_dim;

        res = texture(input_image, offset_uv);
		blur += weight * res;

		offset_uv = (uv + vec2(0.0, -offset))/image_dim;

        res = texture(input_image, offset_uv);
		blur += weight * res;
    }
	
	return blur;
}

void main()
{	
    vec2 image_dim = textureSize(input_image, 0);
    vec4 res = texture(input_image, vec2(gl_GlobalInvocationID.xy/image_dim));

    res = gaussian_vertical(image_dim);

    ivec2 uv = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec3 source = imageLoad(source_image, uv).rgb;

    res.rgb = (source.rgb - intensity*res.rgb)/(1-intensity);

    imageStore(output_image, ivec2(gl_GlobalInvocationID.xy), res);
}

